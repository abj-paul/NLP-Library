
* Begginer Friendly Corpus
  [[https://nlp.stanford.edu/sentiment/code.html][size 5mb]]
  [[https://medium.com/swlh/you-c120c972f8c6][list of beginner friendly dataset]]

* Bangla Corpus
  [[https://banglanlp.org/tools-and-demos/publicly-available-tools-and-resources/][Everything here]]
  Bangla wikipedia dump seems promising.
** NLP projects with bangla
   [[https://github.com/sagorbrur/bnlp][This github project looks nice]]

* New NLP playlist
  https://www.youtube.com/watch?v=n25JjoixM3I&list=PLLssT5z_DsK8BdawOVCCaTCO99Ya58ryR
* Steps
  - Take input from file
  - Make a med word.
  - Find spelling errors.
  - [X] Adding Header files.
** Perplexity
   - Take a corpus. (FIND IT FIRST.)
   - Split it in test and train corpus. You must take the ratio (70:30) as parameter.
   - Stem train data in a bigram model. 
   - SentenceSegmet the test data and send it sentence by sentence to laplace smoothing.
   - We will get the log value. Its likely log base 10. So mathematically,
     #+begin_src text
       0.0001, 10^-3
inverse: 1000, 10^3
     #+end_src
     So we just need to alter the sign of power to get perplexity!
* Days
** 9 Feb - Make language model 
   String matching.
   So find the string/sentence in the text file.
   Count number of matches.
*** Issues
    - fscanf(fptr,"%s %s",two_word)
    - Create a file with 10 "you have"
    - Possible factor: punctuation
** 10 Feb - Know about scanf
   So the punctuations were creating problems for us. To handle them, we need scanf
   - Issues
*** DONE Not enough heap
    Its not heap issue because adding more words cause no issue.
*** index becomes 0
*** not allocated properly
** 14 Feb - Porter, Complete it today!
   - Make a function to find m value
   - make condition functions
   - Make a replace function
** 3March - Edit All files [5/9]
   - [X] auxiliary.cpp
   - [X] bigram.cpp
   - [ ] find_string_match.cpp
   - [ ] main.cpp
   - [X] porters-algorithm.cpp
   - [ ] sentence-probablity.cpp
   - [X] sentence-segmentation.cpp
   - [X] String-Library.cpp
   - [ ] test-area.cpp
*** Issues
    - Flycheck can not detect iostream
** 13March - ******* Next stages
   - Edit String lib with template so that all functions support const abj::String and const char*.
   - Edit SentenceSegmenter with ~inverted comma support~ and ~abbreviation control.~
   - At the end, do multithreading and add socket. So I have to end by 20.
** 25th March
   Organize Bigram class by defining a class for processing sentence fragments.
   Perplexity.
** 26th March
   Noisy Channel model -> minimum edit distance to generate candidate set for the words.
                          Form all_possible_combination sentence
			  Load confusion matrices
			  Find probablity of each sentence using noisy channel model
*** Perplexity
    Make train/corpus and test/input file
    Run text_probablity_using_laplace_smoothing for
        - each sentence
	- iteratively compute PP
*** Solving Big Input Problem
    - [ ] Run the bigram class. Does it work alone?
    - [ ] If it runs, revisit the perplexity and try to edit it to make it work.
    - [ ] If all fails, then we have Kneeser-ney algorithm!
    - [ ] So at night, start with noisy channel model.
** 27th March
   Evaluation class
* Caution!
  our bigram only works for mtl and speech recognition. Due to ~stemming~, it can no longer identify grammatical errors.

* slide contents
  [[https://viewer.diagrams.net/?tags=%7B%7D&highlight=0000ff&edit=_blank&layers=1&nav=1&title=project%20structure#R7Zlvb6IwHIA%2FjcndCw1%2FBV863e6S211MyO22lxV60ASoV6viPv0VKQKtTrd1QhaTZaE%2F2lKePvRXpGdOkuwbAYvoJw5g3DO0IOuZ055huEOX%2Fc8D2yJgOVYRCAkKipBeBTz0DHlQ49EVCuCyUZFiHFO0aAZ9nKbQp40YIARvmtX%2B4rh51QUIoRTwfBDL0T8ooBG%2FLVur4t8hCqPyyrrGzySgrMwDywgEeFMLmbc9c0IwpsVRkk1gnLMruRTt7o6c3Q%2BMwJSe06D%2Fb%2Fy8ng0fvCn%2BEU223uOd89A3il7WIF7xG%2F51P2OBezQngGz5yOm2xEHwKg1g3qPWM282EaLQWwA%2FP7th889iEU1iVtLZIe8bEgqzo4PW9yiYQhAnkOaX1XgDs8RZ6lN6sakmQy8JR7WJGPIY4PMf7ruuELEDTukVxEyJ2HiVoRjtaKnhxlymAKWQqOOou02OZtsYLQmjRwlKw4JhFxFaWscQ2gcQwiRh99w1dOJTrLfObiizY%2FcCU8bE0DwYJnmpiyDtBsj2JXQkkDcoJCDpHDrdFh7f1jOJK6H7nXaTnSWyM9pmN5LYzQieg3mMaPcyhyOsfqO26ZXq1%2FAtKWswZn8xDr98HewA8sia7atx99ZCW5DS0FrHKm9qJGowDcb5awkr%2BTFYLpHfBNWkCjNEH%2FPjgc1LT7xefjzNatWmW14oLgkD6b1GAMuGhVfEh6d2GPIE1ADbB%2FiWMQJjQNG6OYxD0PkVZhixAe7n1xgJ8%2BsI81YMn7eqv%2FgIHZlDoSNT6IgCEkIqdbRzYH%2Fb79BCzpHv1SJlI6p5kRef6ucqM3alraCTXpNJGzj2pXziIAreL9QzPod3ltCRcWHv5A2GquWo4c%2FL%2BtRdtd26rX1toLFn44SyeWkGCWI0dtlDsZLuVclLKinv21QthXpjIazWxSNeKVSo3E2ddOiTpNOWHSqV%2BZB0alnGqxLqodXpLaukQh2HZ9roXG1UYaP8e7CiJKu%2FLclahi0m2VNr4Ufn2HONdK9GqjBS%2BVuoQhXMa6q8pAryJ4LuqGBdVVCiAitWH5GL6tWXePP2Pw%3D%3D][Project Structure Image digital link]]

* TODO Problem Solving
  - Maximum Matching Algorithm
  - Sorting dataset for bigram
  - Threading
  - Automata style inverted comma detection

  - Convert & to and
* Questions
  - Porter's m-value: Should it change after each time the suffic is replaced? I do not think so but still, its a point to keep an eye on when debugging.
* What I have learnt
  - Learn about the error before debugging: When I would encounter errors like rvalue-lvalue errors, i would google a bit, fix some codes and look at the sky, hoping it works. But it was time consuming. Slowly, I have learn that if you encounter some error you are not clear about, first Learn.
  - Extensive test of each module, each function: I would develop a module, do one or two tests and move on to developing the new modules. And this caused a lot of error later on when I have to use these modules later on. Some functions i have never tested enough before, becomes the error. There were a time when, if my code had any segmentation fault, i was sure that the lib_string and lib_vector modules have caused it.
  - SED command to edit corpus files. Like
    #+begin_src bash
sed "s/[0-9]*\s*/DETECT/g"
    #+end_src
    to detect all number+space in our file.
* FAQ for presentation
** Why did you need a separate string class?
   - operator overloading: > < == + - etc
   - Capitalize(), get_raw_data()
   - captialzie(char c) and string_compare
* Sources
  [[https://www.youtube.com/watch?v=QGT6XTeA3YQ&t=10s][N gram smoothing techniques]]
  [[https://www.quora.com/What-are-some-good-algorithms-for-binning-similar-sounding-words][Words with similar pronunciation NLP]]
  [[https://overiq.com/c-programming-101/the-strcmp-function-in-c/][str_cmp code]]
* Tem
